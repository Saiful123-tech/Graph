class Solution {
     void dfs(vector<int> adj[],vector<int> &visited,vector<int> &ans,int node){
        ans.push_back(node);
        visited[node]=true;
        for(auto i: adj[node]){
            if(!visited[i]){
            dfs(adj,visited,ans,i);
            }
        }
    }
  public:
    // Function to return a list containing the DFS traversal of the graph.
   
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
    vector<int> ans;
    vector<int> visited(V,0);
  
            dfs(adj,visited,ans,0);
       
    return ans;
    }
};

// { Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int> ans = obj.dfsOfGraph(V, adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends
TC 0(V+E)
SC 0(V)
