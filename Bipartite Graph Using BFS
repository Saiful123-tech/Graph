class Solution {
public:
    bool biparate(vector<int>adj[],int colour[],int node){
        queue<int> q;
        colour[node]=1;
        q.push(node);
        while(!q.empty()){
            int front=q.front();
            q.pop();
            for(auto i: adj[front]){
                if(colour[i]==-1){
                    if(colour[front]==1){
                        q.push(i);
                        colour[i]=0;
                    }
                    else{
                        q.push(i);
                        colour[i]=1;
                    }
                }
                else if(colour[i]==colour[front]){
                    return false;
                }
            }
        }
        return true;
    }
	bool isBipartite(int V, vector<int>adj[]){
	    // Code here
	    int colour[V];
	    for(int i=0;i<V;i++){
	        colour[i]=-1;
	    }
	    for(int i=0;i<V;i++){
	        if(colour[i]==-1){
	            if(!biparate(adj,colour,i)){
	                return false;
	            }
	        }
	    }
	    return true;
	}

};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isBipartite(V, adj);    
		if(ans)cout << "1\n";
		else cout << "0\n";  
	}
	return 0;
}  // } Driver Code Ends

TC 0(V+E)
SC 0(V)
