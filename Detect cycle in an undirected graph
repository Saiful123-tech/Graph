class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(vector<int> adj[],vector<int> &visited,int node){
       queue<pair<int,int>> q;
       visited[node]=1;
       q.push({node,-1});
       while(!q.empty()){
          int front = q.front().first;
          int parent = q.front().second;
          q.pop();
          for(auto i: adj[front]){
              if(!visited[i]){
                  visited[i]=1;
                  q.push({i,front});
              }
              else if(parent!=i){
                  return true;
              }
          }
       }
       return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int> visited(V,0);
      for(int i=0;i<V;i++){
          if(!visited[i]){
              if(isCycle(adj,visited,i)){
                  return true;
              }
          }
      }
      return false;
    }
};
